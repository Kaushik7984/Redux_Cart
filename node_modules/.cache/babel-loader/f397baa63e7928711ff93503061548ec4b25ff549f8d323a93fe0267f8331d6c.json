{"ast":null,"code":"import { uiActions } from \"./uiSlice\";\nimport { cartActions } from \"./cartSlice\";\nexport const fetchCartData = () => {\n  return dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://reduxcart-b0d79-default-rtdb.firebaseio.com/cart.json\");\n      if (!response.ok) {\n        throw new Error(\"Could not fetch cart data!\");\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed!\"\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n  };\n};\nconst sendRequest = async () => {\n  const response = await fetch(\"https://reduxcart-b0d79-default-rtdb.firebaseio.com/cart.json\", {\n    method: \"PUT\",\n    body: JSON.stringify({\n      items: cart.items,\n      totalQuantity: cart.totalQuantity\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Sending Cart data failed.\");\n  }\n};\ntry {\n  await sendRequest();\n  dispatch(uiActions.showNotification({\n    status: \"success\",\n    title: \"Success!\",\n    message: \"Sending cart data successfully!\"\n  }));\n} catch (error) {\n  dispatch(uiActions.showNotification({\n    status: \"error\",\n    title: \"Error!\",\n    message: \"Sending cart data failed!\"\n  }));\n}","map":{"version":3,"names":["uiActions","cartActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"sources":["D:/ReactWithMAX/ReduxCart/src/store/cartAction.js"],"sourcesContent":["import { uiActions } from \"./uiSlice\";\r\nimport { cartActions } from \"./cartSlice\";\r\n\r\nexport const fetchCartData = () => {\r\n  return (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://reduxcart-b0d79-default-rtdb.firebaseio.com/cart.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not fetch cart data!\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    };\r\n\r\n    try{\r\n     const cartData= fetchData();\r\n     dispatch(cartActions.replaceCart({\r\n        items: cartData.items || [],\r\n        totalQuantity: cartData.totalQuantity\r\n     }))\r\n    }catch(error){\r\n        dispatch(\r\n            uiActions.showNotification({\r\n              status: \"error\",\r\n              title: \"Error!\",\r\n              message: \"Fetching cart data failed!\",\r\n            })\r\n          );\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendCartData = (cart) => {\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data!\",\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nconst sendRequest = async () => {\r\n  const response = await fetch(\r\n    \"https://reduxcart-b0d79-default-rtdb.firebaseio.com/cart.json\",\r\n    {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({\r\n        items:cart.items,\r\n        totalQuantity: cart.totalQuantity,   \r\n      }),\r\n    }\r\n  );\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Sending Cart data failed.\");\r\n  }\r\n};\r\n\r\ntry {\r\n  await sendRequest();\r\n\r\n  dispatch(\r\n    uiActions.showNotification({\r\n      status: \"success\",\r\n      title: \"Success!\",\r\n      message: \"Sending cart data successfully!\",\r\n    })\r\n  );\r\n} catch (error) {\r\n  dispatch(\r\n    uiActions.showNotification({\r\n      status: \"error\",\r\n      title: \"Error!\",\r\n      message: \"Sending cart data failed!\",\r\n    })\r\n  );\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,WAAW;AACrC,SAASC,WAAW,QAAQ,aAAa;AAEzC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjC,OAAQC,QAAQ,IAAK;IACnB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+DACF,CAAC;MAED,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,OAAOD,IAAI;IACb,CAAC;IAED,IAAG;MACF,MAAME,QAAQ,GAAEP,SAAS,CAAC,CAAC;MAC3BD,QAAQ,CAACF,WAAW,CAACW,WAAW,CAAC;QAC9BC,KAAK,EAAEF,QAAQ,CAACE,KAAK,IAAI,EAAE;QAC3BC,aAAa,EAAEH,QAAQ,CAACG;MAC3B,CAAC,CAAC,CAAC;IACJ,CAAC,QAAMC,KAAK,EAAC;MACTZ,QAAQ,CACJH,SAAS,CAACgB,gBAAgB,CAAC;QACzBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACP;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EACpC,OAAO,MAAOlB,QAAQ,IAAK;IACzBA,QAAQ,CACNH,SAAS,CAACgB,gBAAgB,CAAC;MACzBC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE;IACX,CAAC,CACH,CAAC;EACH,CAAC;AACH,CAAC;AAED,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+DAA+D,EAC/D;IACEiB,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBb,KAAK,EAACQ,IAAI,CAACR,KAAK;MAChBC,aAAa,EAAEO,IAAI,CAACP;IACtB,CAAC;EACH,CACF,CAAC;EAED,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC;AAED,IAAI;EACF,MAAMc,WAAW,CAAC,CAAC;EAEnBnB,QAAQ,CACNH,SAAS,CAACgB,gBAAgB,CAAC;IACzBC,MAAM,EAAE,SAAS;IACjBC,KAAK,EAAE,UAAU;IACjBC,OAAO,EAAE;EACX,CAAC,CACH,CAAC;AACH,CAAC,CAAC,OAAOJ,KAAK,EAAE;EACdZ,QAAQ,CACNH,SAAS,CAACgB,gBAAgB,CAAC;IACzBC,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAE;EACX,CAAC,CACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}