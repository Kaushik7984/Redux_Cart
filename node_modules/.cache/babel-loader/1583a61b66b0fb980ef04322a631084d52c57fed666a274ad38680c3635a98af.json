{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./uiSlice\";\nimport { useDispatch } from \"react-redux\";\nconst cart = useSelector(state => state.cart);\nconst dispatch = useDispatch();\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n  };\n};\nconst sendRequest = async () => {\n  const response = await fetch(\"https://reduxcart-b0d79-default-rtdb.firebaseio.com/cart.json\", {\n    method: \"PUT\",\n    body: JSON.stringify(cart)\n  });\n  if (!response.ok) {\n    throw new Error(\"Sending Cart data failed.\");\n  }\n};\ntry {\n  await sendRequest();\n  dispatch(uiActions.showNotification({\n    status: \"success\",\n    title: \"Success!\",\n    message: \"Sending cart data successfully!\"\n  }));\n} catch (error) {\n  dispatch(uiActions.showNotification({\n    status: \"error\",\n    title: \"Error!\",\n    message: \"Sending cart data failed!\"\n  }));\n}\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","useDispatch","cart","useSelector","state","dispatch","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["D:/ReactWithMAX/ReduxCart/src/store/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./uiSlice\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nconst cart = useSelector((state) => state.cart);\r\nconst dispatch = useDispatch();\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n  },\r\n  reducers: {\r\n    replaceCart(state, action) {\r\n      state.totalQuantity = action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data!\",\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nconst sendRequest = async () => {\r\n  const response = await fetch(\r\n    \"https://reduxcart-b0d79-default-rtdb.firebaseio.com/cart.json\",\r\n    {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(cart),\r\n    }\r\n  );\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Sending Cart data failed.\");\r\n  }\r\n};\r\n\r\ntry {\r\n  await sendRequest();\r\n\r\n  dispatch(\r\n    uiActions.showNotification({\r\n      status: \"success\",\r\n      title: \"Success!\",\r\n      message: \"Sending cart data successfully!\",\r\n    })\r\n  );\r\n} catch (error) {\r\n  dispatch(\r\n    uiActions.showNotification({\r\n      status: \"error\",\r\n      title: \"Error!\",\r\n      message: \"Sending cart data failed!\",\r\n    })\r\n  );\r\n}\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}